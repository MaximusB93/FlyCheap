// <auto-generated />
using FlyCheap.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FlyCheap.Migrations
{
    [DbContext(typeof(AirDbContext))]
    [Migration("20231217104647_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FlyCheap.Models.Db.Airlines", b =>
                {
                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<string>("is_lowcost")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name_translationsen")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("code");

                    b.HasIndex("name_translationsen");

                    b.ToTable("Airlines");
                });

            modelBuilder.Entity("FlyCheap.Models.Db.Airports", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("city_code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("country_code")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<bool>("flightable")
                        .HasMaxLength(255)
                        .HasColumnType("boolean");

                    b.Property<string>("iata_type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<float>("lat")
                        .HasColumnType("real");

                    b.Property<float>("lon")
                        .HasColumnType("real");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name_translationsen")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("time_zone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("name_translationsen");

                    b.ToTable("Airports");
                });

            modelBuilder.Entity("FlyCheap.Models.Db.Cities", b =>
                {
                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<string>("casesda")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("coordinateslat")
                        .HasColumnType("real");

                    b.Property<string>("country_code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name_translationsen")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("time_zone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("code");

                    b.HasIndex("casesda");

                    b.HasIndex("coordinateslat");

                    b.HasIndex("name_translationsen");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("FlyCheap.Models.Db.Countries", b =>
                {
                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<string>("casesda")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name_translationsen")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("code");

                    b.HasIndex("casesda");

                    b.HasIndex("name_translationsen");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("FlyCheap.Models.Utils.Cases", b =>
                {
                    b.Property<string>("da")
                        .HasColumnType("text");

                    b.Property<string>("pr")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ro")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("su")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("tv")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("vi")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("da");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("FlyCheap.Models.Utils.Coordinates", b =>
                {
                    b.Property<float>("lat")
                        .HasColumnType("real");

                    b.Property<float>("lon")
                        .HasColumnType("real");

                    b.HasKey("lat");

                    b.ToTable("Coordinates");
                });

            modelBuilder.Entity("FlyCheap.Models.Utils.NameTranslations", b =>
                {
                    b.Property<string>("en")
                        .HasColumnType("text");

                    b.HasKey("en");

                    b.ToTable("NameTranslations");
                });

            modelBuilder.Entity("FlyCheap.Models.Db.Airlines", b =>
                {
                    b.HasOne("FlyCheap.Models.Utils.NameTranslations", "name_translations")
                        .WithMany()
                        .HasForeignKey("name_translationsen")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("name_translations");
                });

            modelBuilder.Entity("FlyCheap.Models.Db.Airports", b =>
                {
                    b.HasOne("FlyCheap.Models.Utils.NameTranslations", "name_translations")
                        .WithMany()
                        .HasForeignKey("name_translationsen")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("name_translations");
                });

            modelBuilder.Entity("FlyCheap.Models.Db.Cities", b =>
                {
                    b.HasOne("FlyCheap.Models.Utils.Cases", "cases")
                        .WithMany()
                        .HasForeignKey("casesda")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlyCheap.Models.Utils.Coordinates", "coordinates")
                        .WithMany()
                        .HasForeignKey("coordinateslat")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlyCheap.Models.Utils.NameTranslations", "name_translations")
                        .WithMany()
                        .HasForeignKey("name_translationsen")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cases");

                    b.Navigation("coordinates");

                    b.Navigation("name_translations");
                });

            modelBuilder.Entity("FlyCheap.Models.Db.Countries", b =>
                {
                    b.HasOne("FlyCheap.Models.Utils.Cases", "cases")
                        .WithMany()
                        .HasForeignKey("casesda")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlyCheap.Models.Utils.NameTranslations", "name_translations")
                        .WithMany()
                        .HasForeignKey("name_translationsen")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cases");

                    b.Navigation("name_translations");
                });
#pragma warning restore 612, 618
        }
    }
}
